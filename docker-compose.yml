version: '3.8'

services:
  # 백엔드 서비스
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: gantt-workload-backend:latest
    container_name: gantt-workload-backend
    restart: always
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=1433
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      - db
    networks:
      - app-network
    volumes:
      - backend-logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 프론트엔드 서비스
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: gantt-workload-frontend:latest
    container_name: gantt-workload-frontend
    restart: always
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
    networks:
      - app-network
    volumes:
      - ./ssl:/etc/nginx/ssl
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 데이터베이스 서비스
  db:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: gantt-workload-db
    restart: always
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_ROOT_PASSWORD}
    ports:
      - "1433:1433"
    networks:
      - app-network
    volumes:
      - db-data:/var/opt/mssql
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${DB_ROOT_PASSWORD} -Q "SELECT 1" -b -o /dev/null
      interval: 30s
      timeout: 10s
      retries: 5

  # 최적화 워커 서비스
  optimization-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: gantt-workload-backend:latest
    container_name: gantt-workload-optimization-worker
    restart: always
    command: node src/workers/optimizationWorker.js
    environment:
      - NODE_ENV=production
      - DB_HOST=db
      - DB_PORT=1433
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - WORKER_ID=optimization-worker
    depends_on:
      - db
      - backend
    networks:
      - app-network
    volumes:
      - backend-logs:/app/logs

  # 모니터링 서비스
  prometheus:
    image: prom/prometheus:latest
    container_name: gantt-workload-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - app-network

  grafana:
    image: grafana/grafana:latest
    container_name: gantt-workload-grafana
    restart: always
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db-data:
  backend-logs:
  prometheus-data:
  grafana-data:
