services:
  # 백엔드 API 서비스
  - type: web
    name: workload-optimization-api
    env: node
    plan: starter
    buildCommand: npm install && npm run build
    startCommand: npm start
    healthCheckPath: /api/health
    envVars:
      - key: NODE_ENV
        value: production
      - key: PORT
        value: 3000
      - key: DB_HOST
        fromService:
          name: workload-postgres
          type: postgres
          property: host
      - key: DB_PORT
        value: 5432
      - key: DB_USER
        fromService:
          name: workload-postgres
          type: postgres
          property: user
      - key: DB_PASSWORD
        fromService:
          name: workload-postgres
          type: postgres
          property: password
      - key: DB_NAME
        value: my_project_db
      - key: DB_SSL
        value: true
      - key: DB_CONNECTION_LIMIT
        value: 10
      - key: REDIS_URL
        fromService:
          type: redis
          name: workload-cache
          property: connectionString
      - key: JWT_SECRET
        generateValue: true
      - key: JWT_EXPIRES_IN
        value: 24h
      - key: LOG_LEVEL
        value: info
      - key: ENABLE_CACHE
        value: true
      - key: CACHE_TTL
        value: 300
      - key: MAX_WORKLOAD_PER_RESOURCE
        value: 8
      - key: OPTIMIZATION_WORKER_COUNT
        value: 2
      - key: ENABLE_COMPRESSION
        value: true
      - key: RATE_LIMIT_WINDOW_MS
        value: 900000
      - key: RATE_LIMIT_MAX
        value: 100
      - key: CORS_ORIGIN
        value: https://workload-optimization-system.netlify.app
    autoDeploy: true

  # Redis 캐시 서비스
  - type: redis
    name: workload-cache
    ipAllowList: []
    plan: starter

  # PostgreSQL 데이터베이스 서비스
  - type: postgres
    name: workload-postgres
    plan: starter
    ipAllowList: []
    databaseName: my_project_db
    user: postgres_user